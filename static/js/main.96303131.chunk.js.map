{"version":3,"sources":["API.ts","util.ts","components/QuestionCardComponent.styles.ts","components/QuestionCardComponent.tsx","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","handleClickAnswer","userAnswer","questionNumber","totalQuestion","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameover","setGameover","startTrivia","MEDIUM","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wJACYA,E,+FAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAgBL,IAAMC,EAAkB,uCAAG,WAAOC,EAAeC,GAAtB,iBAAAC,EAAA,6DAExBC,EAFwB,6CAEkCH,EAFlC,uBAEuDC,EAFvD,2BAGJG,MAAOD,GAHH,8BAGcE,OAHd,cAGxBC,EAHwB,yBAKvBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eAClBA,GADiB,IAEpBC,SCnBqBC,EDmBC,GAAD,mBAAKF,EAASG,mBAAd,CAAiCH,EAASI,iBClBrE,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADZ,IAACL,MDYK,2CAAH,wD,uxBEfxB,IAAMM,EAAUC,IAAOC,IAAV,KAmBPC,EAAgBF,IAAOC,IAAV,KAcR,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACZD,EACI,4CACCA,GAAWC,EACZ,2CACA,8CCPKC,EAjB2B,SAAC,GAAD,IAAEd,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,QAASc,EAArB,EAAqBA,kBAAmBC,EAAxC,EAAwCA,WAAYC,EAApD,EAAoDA,eAAgBC,EAApE,EAAoEA,cAApE,OACtC,eAACV,EAAD,WACI,oBAAGW,UAAU,SAAb,wBACgBF,EADhB,MACmCC,KAEnC,mBAAGE,wBAAyB,CAACC,OAAQrB,KACpCC,EAAQF,KAAK,SAAAuB,GAAM,OAChB,cAACX,EAAD,CAA4BC,SAAmB,OAAVI,QAAU,IAAVA,OAAA,EAAAA,EAAYO,iBAAkBD,EAAQT,aAAuB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYM,UAAWA,EAA/G,SACA,wBAAQE,WAAUR,EAAyBS,MAAOH,EAAQI,QAASX,EAAnE,SACI,sBAAMK,wBAAyB,CAACC,OAAQC,QAFxBA,U,kzCCpBzB,IAAMK,EAAcC,YAAH,KAkBXpB,EAAUC,IAAOC,IAAV,KCmFLmB,MAzFf,WAEE,IAFa,EAMiBC,oBAAS,GAN1B,mBAMNC,EANM,KAMGC,EANH,OAOqBF,mBAA0B,IAP/C,mBAONG,EAPM,KAOKC,EAPL,OAQeJ,mBAAS,GARxB,mBAQNK,EARM,KAQEC,EARF,OASyBN,mBAAyB,IATlD,mBASNO,EATM,KASOC,EATP,OAUcR,mBAAS,GAVvB,mBAUNS,EAVM,KAUEC,EAVF,OAWmBV,oBAAS,GAX5B,mBAWNW,EAXM,KAWIC,EAXJ,KAgBPC,EAAW,uCAAG,4BAAAlD,EAAA,6DAElBuC,GAAW,GACXU,GAAY,GAHM,SAKSpD,EAnBP,GAmB2CD,EAAWuD,QALxD,OAKZC,EALY,OAMlBX,EAAaW,GAGbL,EAAS,GACTF,EAAe,IACfF,EAAU,GAGVJ,GAAW,GAdO,4CAAH,qDA6CjB,OACE,qCACA,cAACL,EAAD,IACA,eAAC,EAAD,WACE,8CACCc,GAhEiB,KAgELJ,EAAYS,OAA4B,wBAAQ3B,UAAU,QAAQO,QAASiB,EAAnC,mBAAiE,MACpHF,GAAY,oBAAGtB,UAAU,QAAb,4BAAqCoB,EAArC,OACbR,GAAW,mBAAGZ,UAAU,UAAb,gDAEVY,IAAYU,GAEd,cAAC,EAAD,CAAcxB,eAAgBkB,EAAS,EACvCjB,cAvEkB,GAwElBlB,SAAUiC,EAAUE,GAAQnC,SAC5BC,QAASgC,EAAUE,GAAQlC,QAC3Be,WAAYqB,EAAaA,EAAYF,QAAQY,EAC7ChC,kBA5CgB,SAACiC,GACnB,IAAKP,EAAU,CAEb,IAAMnB,EAAS0B,EAAEC,cAAcxB,MAEzBb,EAAUqB,EAAUE,GAAQ/B,iBAAmBkB,EAEjDV,GAAS4B,GAAS,SAACU,GAAD,OAAUA,EAAO,KAEvC,IAAMC,EAAe,CACnBnD,SAAUiC,EAAUE,GAAQnC,SAC5BsB,SACAV,UACAW,cAAeU,EAAUE,GAAQ/B,gBAEnCkC,GAAe,SAACY,GAAD,4BAAcA,GAAd,CAAoBC,WA+BjCV,GAAaV,GAAWM,EAAYS,SAAWX,EAAS,GAAgBiB,IAAXjB,EAIzD,KAHF,wBAAQhB,UAAU,OAAOO,QA7BZ,WACnB,IAAM2B,EAAelB,EAAS,EAlDV,KAmDhBkB,EACFX,GAAY,GAGZN,EAAUiB,IAuBN,kCCjFKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96303131.chunk.js","sourcesContent":["import {shuffleArray} from \"./util\";\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\nexport type QuestionState = Question & {answers: string[]};\n\nexport const fetchQuizQuestions = async (amount:number, difficulty: Difficulty ) => {\n\n    const endpoint : string = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\n    const data = await (await fetch (endpoint)).json();\n    // console.log(data)\n    return data.results.map((question: Question) => ({\n        ...question,\n        answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n    }))\n\n}\n// 39mins","// export const shuffleArray = (array: string[]) => {\n//     [...array].sort(() => Math.random() - 0.5)\n// }\n\n\nexport const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 75%;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from \"react\";\n//types\nimport {AnswerObject} from \"../App\"\nimport {Wrapper, ButtonWrapper} from \"./QuestionCardComponent.styles\"\n\n\ntype PropsType = {\n    question : string;\n    answers: string[];\n    handleClickAnswer: (e : React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNumber: number;\n    totalQuestion: number;\n\n}\n\nconst QuestionCard: React.FC<PropsType> = ({question, answers, handleClickAnswer, userAnswer, questionNumber, totalQuestion}) =>  (\n    <Wrapper>\n        <p className=\"number\">\n            Question : {questionNumber} / {totalQuestion}\n        </p>\n        <p dangerouslySetInnerHTML={{__html: question}}></p>\n        {answers.map( answer =>(\n            <ButtonWrapper key={answer} correct={userAnswer?.correctAnswer === answer} userClicked={userAnswer?.answer === answer}>\n            <button disabled={userAnswer? true: false} value={answer} onClick={handleClickAnswer}>\n                <span dangerouslySetInnerHTML={{__html: answer}}></span>\n\n            </button>\n            </ButtonWrapper>\n        ))}\n\n    </Wrapper>\n    )\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\n// import BGImage from './images/nattu-adnan-unsplash.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    \n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n  * {\n    \n    box-sizing: border-box;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  > p {\n    color: #000;\n  }\n  .score {\n    color: #000;\n    font-size: 2rem;\n    margin: 0;\n  }\n  h1 {\n    \n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin: 20px;\n  }\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  .start {\n    max-width: 200px;\n  }\n  .loading, .score{\n      font-color: steelblue;\n  }\n`;","import React, {useState} from 'react';\nimport {fetchQuizQuestions} from './API'\n//components\nimport QuestionCard from \"./components/QuestionCardComponent\"; \n//types\nimport {Difficulty, QuestionState} from \"./API\"\n//style\nimport {GlobalStyle, Wrapper} from \"./App.styles\"\n\nexport type AnswerObject = {\n  question : string;\n  answer : string;\n  correct: boolean;\n  correctAnswer: string;\n}\nfunction App() {\n\n  let TOTAL_QUESTIONS = 10;\n\n\n  // states and setStates\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score,  setScore] = useState(0)\n  const [gameover, setGameover] = useState(true)\n\n  \n  \n\n  const startTrivia = async () => {\n    //after clicking, let's start loading\n    setLoading(true)\n    setGameover(false)\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.MEDIUM)\n    setQuestions(newQuestions)\n\n    // will error handle here, later\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    \n    //stop loading\n    setLoading(false)\n  }\n  \n  const checkAnswer = (e:React.MouseEvent<HTMLButtonElement> ) => {\n    if (!gameover) {\n      // User's answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save the answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n  const nextQuestion = () =>{\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS){\n      setGameover(true)\n    }\n    else{\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1> Quick Quiz </h1>\n      {gameover || userAnswers.length === TOTAL_QUESTIONS? <button className=\"start\" onClick={startTrivia}>Start</button> : null}\n      {!gameover && <p className=\"score\">You've Scored: {score} </p> }\n      {loading && <p className=\"loading\">Loading questions, please wait...</p>}\n\n      {!loading && !gameover &&\n\n      <QuestionCard questionNumber={number + 1} \n      totalQuestion={TOTAL_QUESTIONS}\n      question={questions[number].question}\n      answers={questions[number].answers}\n      userAnswer={userAnswers? userAnswers[number]:undefined}\n      handleClickAnswer={checkAnswer}\n      /> }\n      {!gameover && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}